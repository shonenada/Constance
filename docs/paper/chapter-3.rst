驱动引导器
==================

3.1 BIOS 启动机制

当 PC 的电源打开的时候，80x86 架构 CPU 将自动进入实模式，并从绝对地址 0xFFFF 开始出自动执行。通常这个地方是 ROM-BIOS 的地址。
PC 的 BIOS 将执某些系统的检测，例如内存大小检测等。随后，在绝对地址 0 处初始化中断向量表。然后将启动设备的第一个扇区（512B）读入绝对地址 0x7C00 处，跳转到那并开始执行内容。
CPU 判断第一个扇区是否引导程序的依据是，第一个扇区的最后两个字节内容是 0xAA55。
因此，引导程序大小为 512字节，并且最后两个字节的内容为 0xAA55。

Constance 系统的启动过程为：

1、初始化寄存器
2、从启动设备读取内核到内存，同时输出提示信息。
3、进入保护模式（打开 A20 地址线，设置 GDT，正式进入保护模式）
4、进入保护模式后，初始化寄存器（ds，ss，es，fs，gs 等）。
5、将内存中的内核复制到 0x10000 处
6、跳入 C 编写的 OS 内核。

3.2 BIOS 中断

BIOS 中提供了大量中断，例如从键盘获取输入，打印内容到屏幕，读取硬盘内容等。Constance 内核引导启动程序中，主要使用了 13h 中断，即从硬盘调入数据到内存中。为了输出相关信息，还是用了 10h 中断，即打印内容到屏幕上。

    3.2.1 读取硬盘到内存
        读取硬盘数据到内存，使用的是 13h 中断，相关参数由各种寄存器设置。
        al 表示从硬盘中读入多少扇区到内存中
        ah = 02h，2号中断，表示从硬盘扇区中读取数据到内存中
        bx es:bx表示读入的内存目标地址
        cl 0~5 位表示开始扇区，6、7位表示磁道号高2位
        ch 表示磁道低8位
        dl 表示从哪个磁盘中读入数据
        dh 表示磁头号

        对于软盘来说，一共有 80 个磁道（柱面，0~79号），每个柱面有 2 个磁头，每个磁头有 18 个扇区。因此，柱面号（磁道号）、扇区号、磁头号之间关系为：
        1、柱面号 = 扇区号 / 36
        2、磁头号 = (扇区号 / 18) & 1
        3、起始扇区号 = (扇区号 % 18) + 1

        Constance 从硬盘读入内存的相关汇编代码为：

        _read_sector
          push cx    ; 保存相关寄存器
          push bx
          mov ax, si    ; si 是外部参数
          mov cl, 18    ; 每个磁盘有 18 个扇区
          div cl    ; ah = ax % cl, al = ax / cl
          inc ah
          mov cl, ah    ; cl = sector = (sector_numer % 18) + 1
          mov dh, al
          and dh, 1    ; dh = head = (sector_number / 18) & 1
          shr al, 1
          mov ch, al    ; ch = cylinder = (sector_number / 18) >> 1
          mov dl, 0    ; 从 0 号设备读入数据
          mov bx, di    ; 缓冲地址
          __go_on_reading:
            mov ah, 0x02    ; ah = 02h
            mov al, 1    ; 每次只读一个扇区
            int 0x13
          pop bx
          pop cx

    3.2.2 使用汇编打印字符到屏幕
        为了能够清楚了解引导器目前的情况，我们可以向屏幕输出字符。
        在汇编程序中，输出字符到屏幕，使用 10h 的 13 号中断。该中断和其他中断相同，也需要为其设置相关的参数。其中，寄存器 cx 的值表示输出的字符串的长度。而 es:bp 表示的是输出的字符串地址。        该中断可以设置输出的字符串的背景颜色和前景颜色。寄存器 bl 表示的是字体颜色（前景颜色），而寄存器 bh 表示是字符串的背景颜色。颜色对应的如下表：
        00 黑色
        01 蓝色
        02 绿色
        03 青色
        04 红色
        05 洋红色
        06 棕色
        07 浅灰色
        08 深灰色
        09 浅蓝色
        10 浅绿色
        11 浅青色
        12 浅红色
        13 粉红色
        14 浅棕色
        15 白色

    Constance 中 输出字符串相关的例程如下：
        push es
        mov ax, cs
        mov es, ax
        mov ah, 0x03
        xor bh, bh
        int 0x10
        mov bl, 0x07
        mov bh, 0x0
        mov cx, 0x15
        mov ax, loaded_msg
        mov bp, ax
        mov ax, 0x1301
        int 0x10
        pop es
        ret 

3.3 保护模式

    3.3.1 内存寻址
        对于 80x86 CPU 来说，地址总线宽度为 32 位，所以一共有 2^32 个不同的物理地址，即内存物理地址空间有 4 GB，总共可以寻址 4 GB 的物理内存。为了进行内存寻址，80x86 使用了一种称为段（segment）的寻址技术，把内存空间分成一个或多个称为段的线性区域，使对一个对象的寻址转换为使用一个段的起始地址和一个段内偏移地址两部分构成。段地址部分使用 16 位的段选择符来指定。段内偏移地址部分使用 32 位的值来指定。由一个 16 位的段和 32 位的便宜构成的 48 位地址，称为逻辑地址。
        在 80x86 指令中，规定了计算偏移量的很多方式，称为指令寻址方式。指令的偏移量由 3 个部分组成，分别是：基地址寄存器、变址寄存器和一个偏移量。他们三个之间的关系为：偏移地址 = 基地址 + （变址 x 比例因子） + 偏移量。

    3.3.2 保护模式
        CPU 有两种工作模式：实模式和保护模式。电源打开后，CPU 默认工作在实模式下，需要通过一些步骤开启保护模式，才能使 CPU 在保护模式下工作，CPU 有着巨大的寻址能力，并且为操作系统提供了更好的硬件保障。
        在实模式下，CPU 最大寻址空间为 1M，而保护模式下，32 位系统 CPU 理论最大寻址空间为 4GB（配合 PAE 技术，是可以超过 4GB）。并且，在保护模式下，“段”不再作为一个选择符存在，而是作为一个指向一个数据结构的表项(GDT, Global Descriptor Table)的索引，在这个表项中，详细定义了段的起始地址、界限、属性等等内容。

    3.3.3 进入保护模式
        80x86 可以工作在几个模式下。当机器电源开启时，处理器工作在处理器兼容的实地址模式下，并从物理地址 0xFFFFFFF0 处开始执行软件初始化程序。初始化程序必须设置基本系统功能操作必要的数据结构信息，如中断处理向量表的初始化等。如果处理器仍然工作在实模式下，那么软件必须加载操作系统模块和相应的数据，使得操作系统能够正常可靠地运行。如果处理器要工作在保护模式下，那么操作系统就需要加载保护模式需要的数据结构，然后跳转到保护模式。
        保护模式所需要的数据结构，由处理器内存管理功能确定。处理器支持分段模型和分页机制。但这两种机制都需要操作系统为内存管理硬件设置所需的数据结构。包括：
        · 保护模式中断描述符表 IDT
        · 全局描述符表 GDT
        · 任务状态段 TSS
        · 局部描述符 LDT
        · 若使用分页机制，则需要设置至少一个目录和至少一个页表
        · 处理器切换到保护模式下运行代码段
        · 含有中断异常处理程序代码模块
        在能够切换保护模式之前，软件初始化程序还需要设置：
        · 全局描述符基地址寄存器 （GDTR）
        · 中断描述符基地址寄存器 （LDTR）
        · 控制寄存器 （CR1 ~ CR3）
        设置完毕后，值位 CR0 保护模式标志位 PE （第 0 位），进入保护模式。
        为了实现无分页的平坦内存模型，软件初始化代码必须至少一个代码段和一个数据段的 GDT 表。而 GDT 表的第一项内容也是空描述符。
        在刚进入保护模式中运行时候，特权级为0，为了保证程序兼容性，切换操作应该按照以下步骤进行：
        1、关中断。CLI 指令可以禁止可屏蔽硬件中断，同时软件应该确保模式切换期间，不产生异常和中断。
        2、执行 LGDT。把 GDT 的基地址加载到 GDTR 寄存器中。
        3、控制寄存器 CR0 中的 PE 标志设为 1
        4、修改完 CR0 后，立即执行一个远跳转，或者远调用，跳转到保护模式下的代码段。
        5、若要使用局部描述符表，则还需要执行 LLDT 指令，把 LDT 端的选择符加载到 LDTR 上。
