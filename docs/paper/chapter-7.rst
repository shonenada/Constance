进程调度
===================

在操作系统中，进程多于处理器的情况是非常常见的，为了保证系统吞吐量，系统不可能让处理器顺序地执行完每一个进程。这种情况，需要操作系统进行进程调度，由系统决定按照怎么样的顺序执行进程。

7.1 状态任务段

状态任务段（Task State Segment，TSS），使用来指定构成任务执行空间的各个段，并为任务状态信息提供存储空间。

7.2 进程创建

Constance 中除了第一个 init 进程，其余进程大都是通过 fork 系统调用创建的。
fork 系统调用，会复制当前进程的地址空间和资源，生成一个子进程。与 unix 的 fork 调用一样，fork 在子进程中返回 0，而在父进程中返回子进程的进程号。

fork 执行过程大概如下：

    1、在进程表中寻找一个未使用的进程，分配进程号 pid。
    2、为子进程申请新的内存空间。
    3、复制进程参数，如进程号，父进程号，组号等。
    4、为子进程的页目录申请内存空间，并初始化子进程页目录。
    5、复制父进程页目录到子进程。
    6、复制父进程上下文和寄存器状态。
    7、设置 eip 寄存器。

值得一提的是，在创建进程时，采用了写时复制机制。
写时复制机制是一种推迟或避免数据复制的方法。在创建新进程的时候，内核并不会直接复制进程的整个内存空间，而是先让父进程和子进程共用一个副本，也就是父子进程会使用同一个物理页。这样做的目的是节省内存空间，同时也能够快速地创建进程。
在 fork 创建了子进程后，内核会以只读的方式共享父进程内存空间，当父子任一进程对内存进行写入操作时，会引起页面写保护错误，再由页错误处理程序进行解决，将数据写入内存中。

7.3 进程执行

Constance 中，由 exec() 完成进程执行功能。exec() 接受一个可执行文件的地址以及它的参数，然后执行该文件。
在 exec 内部，它首先调用 namei 函数打开传入的可执行文件，读取其文件头，检查文件头中的魔术（Magic Number）是否符合要求。随后申请新的内存，并为文件分配内存。然后将可执行文件载入内存中。接着，内核对新进程分配并初始化内存空间，将参数和参数数压入内存空间中的栈中。最后返回用户态。

7.4 进程切换

每个进程有自己的内存空间，也有内核栈和寄存器集合。Constance 中的进程切换首先设置 tss 中的 esp0 字段，设置新进程的栈指针；载入新进程的页目录，然后保存旧进程上下文，并载入新进程的上下文到各个寄存器中。

7.5 进程调度
