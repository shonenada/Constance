中断处理
=================

中断是指，在操作系统运行期间发生非正常或非预期的事件，处理器需要暂时停止当前的程序切换到相应的事件处理程序，当中断处理完毕后再继续之前程序的执行。

5.1 中断类型

中断可以分成三种类型：

· 中断（Interrupt）：由处理器外部设备产生，一般发生于外部硬件设备数据交互请求。
· 陷阱（Trap，或称自陷）：由处理器自身产生，在程序执行过程产生。也称“软中断”。在 Constance 中，通过 trap 实现系统调用功能。
· 异常（Exception）：因处理器执行指令失败而产生，例如内存缺页或除以零操作等。处理器在完成异常处理之后会重新执行产生异常的指令。

5.2 中断处理过程

1、处理器检查中断条件是否满足。即是否有中断源，是否允许处理器中断。
2、如果处理器响应中断，则首先会关中断，避免新的中断发生，保证系统安全运行。
3、保存处理器当前现场，即相关的寄存器。
4、根据中断原因，调用对应的中断处理程序。
5、执行处理程序。
6、恢复现场，中断返回。
7、开中断，允许处理器响应中断。

5.3 中断处理
    
    5.3.1 IDT
        一个操作系统必须能够对 CPU 发出的中断或异常进行正确地处理，以保证系统的安全性。为了能够进行中断处理，Constance 在内核初始化的时候对 IDT，即Interrupt Descriptor Table，中断向量表（或中断描述符表）进行配置。中断向量表一共可以存储 256 个中断向量，中断向量表用来告诉操作系统，当中断发生的时需要从哪里进入中断处理程序。每一个中断向量中都保存了中断处理程序的入口地址以及相关的描述符属性。
        保护模式下的中断处理第 0~31 号中断、异常由 Intel 所保留，例如当发生除以零异常的时候，处理器会发送 0 号中断。32号及以后的中断由内核开发者自行使用。
        在 Constance 中，为 0~31 号中断分别设置了中断向量，同时也为第 80h 号中断设置了中断向量，用来完成系统调用。

    5.3.2 ISR
        ISR，即 Interrupt Service Routines，中断处理程序。每一个中断向量都指向一个 ISR 的入口地址。
        ISR 主要任务是处理中断请求，但在正式处理中断请求之前，需要保护处理器现场。
        所谓保护处理器现场，具体来说即将寄存器压入堆栈，设置几个段寄存器指向 0x10（内核数据段起始地址），调用中断处理程序，虽然恢复段寄存器，从堆栈中弹出压入的寄存器值。
        在 Constance 的实现中，保护现场的工作交由汇编程序完成，中断处理程序由 C 编写，汇编负责跳入指定的处理程序。

    5.3.3 IRQ
        IRQ，即 Interrupt Requests，中断请求。是指由硬件发出的中断。当硬件需要读取数据或者写入数据的时候，硬件会向操作系统发出中断请求。例如当键盘的键被按下的时候，会向操作系统发出传输数据的中断请求，处理器可从缓存中读入按下的键的数据。
        不同硬件的请求也有着固定的 IRQ 号，处理过程和软件吹了过程一样。Constance 为了实现简单，将 IRQ 处理和中断处理相融合，为此，需要对 8259 芯片进行编程，使 IRQ 0 ~ 15 号映射到中断向量表的 16 ~ 47 号。

5.4 系统调用

    Constance 设置了 RING0 和 RING3 两个权限级区分内核态和用户态。因此用户态进程是不允许访问内核态资源。为了能够让内核态进程能够为用户态进程服务，Constance 通过“系统调用”实现这一需求。
    系统调用实际上是程序在执行过程产生一个软中断，处理器根据这个软中断请求，调用响应的系统调用。
