内核初始化
==============

从引导程序跳转到操作系统内核后，需要对内核进行初始化。对部分硬件进行驱动初始化，才能使操作系统正常运作。其中需要进行初始化的主要有：显存、中断处理程序，时钟处理，键盘处理，硬盘驱动等。
随后，内核设置进程调度程序，配置高速缓存，初始化第一个进程，开中断等等。

4.1 清屏

在进入系统之前，屏幕上可能还残留 BIOS 或者引导器中留下的信息。在进入操作系统之前，需要进行一次清屏操作。
在汇编中使用 10h 中断可以进行清屏操作。相关参数如下表：
AH 为 06 时，向上滚动
AH 为 07 时，向下滚动
AL 表示需要滚动多少行
BH 空白区域的属性
CH 表示区域左上角的 Y 坐标
CL 表示区域左上角的 X 坐标
DH 表示区域右下角的 Y 坐标
DL 表示区域右下角的 X 坐标

Constance 中清屏相关例程如下：
  mov ax, 0x0600
  mov bx, 0x0700
  mov cx, 0
  mov dx, 0x0184
  ret

4.2 重置 GDT
上文提及的 GDT，即 Global Descriptor Table，全局描述符表，在操作系统中的作用是用来限制内存中不同部分的访问权限。在 Constance 中，设置 GDT 是用来区分内核态和用户态空间的权限。
每一个 GDT 实体规定一个范围内存的访问权限。访问权限可以分成 4 个级别，分别为 RING0、RING1、RING2、RING3。在 Constance 中，RING0 为系统内核权限，RING3 为用户权限。
一个 GDT 实体包含以下内容：
1、内存起始地址
2、内存长度限制
3、描述符属性，包括段是否有效、权限级、描述符类型、操作数长度属性等。
GDT 第一项 GDT 实体必须为空描述符，即所有值都为 0。
Constace 中共设置 4 个 GDT 实体，分别为 RING0 权限级别下的代码空间和数据空间以及 RING3 权限级下的代码空间和数据空间。


4.5 系统时钟与 PIT

Constance 通过 Intel 8253 PIT （Programmable Interval Timer）产生的时间中断，实现计时和进程调度。
Intel 8253 芯片本身有三个通道，分别有不同的作用，对应的数据口是 0x40, 0x41 和 0x42，以及命令口为 0x43。其中生产时钟中断的是通道 0 即 0x40 口。
8253 芯片有一个输入率，为 1193180Hz，在每个时钟周期，计数器会减 1，当减到 0 产生一次中断。在系统初始化过程，我们需要为芯片设置一个除数值 div ，芯片会计算 1193180 / div，计算所得结果为时钟中断产生的频率，函数代码为：

void set_timer_phaser(int hz) {
    int div = 1193180 / hz;
    outportb(0x43, 0x36);
    outportb(0x40, div & 0xFF);
    outportb(0x40, div >> 8);
}

Constance 中，设置了每 100ms 产生一次中断。


4.8 屏幕初始化

在汇编基础章节中，我们提及了使用汇编来输出字符串到屏幕上。虽然我们可以在 C 中封装相关的汇编代码，使得编程接口更加简便，但使用汇编依旧有些复杂。所幸的是，VGA (Video Graphics Array, 视频图形矩阵) 显卡提供了另一种更加简单的操作方式：通过对 0xB8000 ~ 0x8Bfa0 地址空间进行操作，来达到修改屏幕上显示内容的目的。VGA 控制器会自动地更新内存中的数据到屏幕上，因此不需要太多关心如何使用汇编将数据打印到屏幕上。然而，对屏幕进行滚动的操作还是要交给内核执行。
在 Constance 中这段内存被组织成一个 ushort 数组，共有 80x25 个元素，每一个元素对应屏幕上的一个字符。每一个元素结构如下：

struct vchar {
    uchar v_char:8;
    uchar v_fgcolor:4;
    uchar v_bgcolor:4;
};

其中 v_char 是一个 ASCII 字符，fgcolor 是字体颜色，bgcolor 是背景颜色，字体颜色与背景颜色使用的值与汇编中输出字符串使用的颜色值相同。

此外，内核还需要处理屏幕滚动的问题，处理方式是，判断当前字符光标坐标是否超出 80x25 的范围，若超出则复制 vchar 到正确的位置，达到屏幕滚动的效果。

4.11 init0

4.13 初始化 init1

