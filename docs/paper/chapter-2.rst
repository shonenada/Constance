汇编
======

2.1 汇编基础

汇编器是专门将低级汇编语言编译成含有机器码的二进制程序或目标文件。
汇编器编译产生的目标文件一般会包含至少 3 个段(segment)或区(section)，分别为：正文段(.text), 数据段(.data), 未初始化数据段(.bss)。
正文段（或称为代码段）是一个已初始化过的段，通常只含有执行代码和只读数据。数据段也是初始化过的段，包含可读/写的数据。而未初始化数据段则未被初始化。
未初始化段比会保留在目标文件程序空间中，但当执行文件被操作系统加载时，操作系统会为程序初始化该段为0.
在汇编代码中可以通过伪操作符来更改写入的段。

2.2 C 语言中日嵌入汇编

有的时候为了提高指令执行速度，可以在 C 代码中直接编写汇编。在 C 代码中嵌入的汇编称为内联汇编。
使用 C 的关键词 asm 即可在 C 中嵌入汇编代码。基本语法为：

asm("汇编语句"
    : 输出寄存器
    : 输入寄存器
    : 会被修改的寄存器)

输出寄存器表示当折断嵌入汇编执行完之后，哪些寄存器用于存放输出数据。这些寄存器会分别对应 C 语言表达式值或一个内存地址。
输入寄存器表示在开始执行汇编之前，指定一些寄存器中应存放的输入值，它们也分别对应 C 变量或常数值。
会被修改的寄存器表示已对其中列出的寄存器中的值进行了改动，gcc 需要重新载入这些寄存器。
内联汇编输出、输入寄存器使用“寄存器加载代码”来表示不同的寄存器。

a 使用寄存器 eax
b 使用寄存器 ebx
c 使用寄存器 ecx
d 使用寄存器 edx
S 使用 esi
D 使用 edi
q 使用动态分配字节可寻址寄存器（eax, ebx, ecx 或 edx）
r 使用任意动态分配的寄存器
g 使用通用有效的地址即可（eax, ebx, ecx, edx 或内存变量）
A 使用 eax 与 edx 联合（64位）
+ 表示操作数可读可写
m 使用内存地址
o 使用内存地址并可以加偏移值
I 使用常数0-31
J 使用常数0-63
K 使用常数0-255
L 使用常识0-65535
M 使用常数0-3
N 使用1字节常数（0-255）
O 使用常数0-31
= 输出操作数。输出值将替换当前值
& 早期会变得操作数。表示在使用完操作数之前，内容会被修改

另外值得指出的是，C 中内联汇编是 AT&T 格式的汇编语句，与 nasm 格式汇编语句是不相同的。


2.3 C 与汇编相互调用

2.3.1 在 C 中调用汇编

如上文所提到，为了提高代码执行效率，可以在 C 代码中直接使用汇编语言。
和内嵌汇编不同的是，这种方式的汇编代码会被汇编编译器编译成目标文件。

例如交换两个变量的值的函数，对应 C 代码如下：::

    void swap(int *a, int *b) {
        int c;
        c = *a;
        *a = *b;
        *b = c;
    }

汇编代码如下::

    .text
    globl _swap    ; 表示为全局
    _swap:
        pushl %ebp    ; 保存原 ebp 值，设置当前函数帧指针
        movl %esp, %ebp    ; 获取栈指针
        subl $4, %esp    ; 为局部变量 c 在栈内存分配空间
        movl 8(%ebp), %eax    ; 取函数第一个参数，这个参数是一个整数类型值的指针。
        movl (%eax), %ecx     ; 取指针所指的内容，保存到局部变量 c 中。
        movl %ecx, -4(%ebp)
        movl 8(%ebp), %eax
        movl 12(%ebp), %edx    ; 取第二个参数
        movl (%edx), %ecx    ; 把第二个参数的内容放在第一个参数所指的位置
        movl %ecx, (%eax)
        movl 12(%ebp), %eax    ; 再取第二个参数
        movl -4(%ebp), %ecx    ; 然后把局部变量 c 中的内容放到这个指针所指的位置
        movl %ecx, (%eax)
        leave    ; 恢复 ebp，esp 值
        ret

则在 C 程序中，调用 _swap 汇编代码，只需要声明::

    extern void swap(int *a, int *b);

调用方式和一般函数一样。
需要指出的是，汇编程序与 C 程序编译之后形成的目标文件(`*.o文件`) 需要链接到一起，否则会出现函数未定义的错误。

2.3.2 在汇编中调用 C 函数

在汇编中使用 C 函数的方法与在 C 函数中使用汇编的方法相类似。
在汇编代码中声明函数的外部函数::

    [extern func]

使用 call 命令调用函数即可::

    call func

C 与汇编相互调用函数可以让操作系统内核开发高效方便。
